@page "/"

<h3>List of User</h3>
<div class="row mb-3">
    <div class="col-md-1 col-sm-10 mx-sm-auto m-1 d-grid">
        <button @onclick="HandleAdd" class="btn btn-outline-success">Add</button>
    </div>
    <div class="col-md-1 col-sm-10 mx-sm-auto m-1 d-grid">
        <button @onclick="DeleteAll" class="btn btn-outline-danger">DeleteAllKey</button>
    </div>
    <div class="col-md-1 col-sm-10 mx-sm-auto m-1 d-grid">
        <button @onclick="DeleteOne" class="btn btn-outline-dark">DeleteOneKey</button>
    </div>
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <div class="input-group">
            <input class="form-control" @onchange="HandleSearch" placeholder="Search..." />
        </div>
    </div>
</div>
@if (employeeLists == null)
{
    <div class="row">
        <div class="col-2 mx-auto">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-10 col-12 mx-auto">
            <table class="table">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">No</th>
                        <th scope="col">Name</th>
                        <th scope="col">Age</th>
                        <th scope="col">Email</th>
                        <th scope="col">Phone</th>
                        <th scope="col">Credit Card</th>
                        <th scope="col">Join Date</th>
                        <th scope="col">Settings</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var person in employeeLists.Select((data,idx) => (data,idx)))
                    {
                        <tr>
                            <td>@(person.idx + 1)</td>
                            <td>@person.data.Name</td>
                            <td>@person.data.Age</td>
                            <td>@person.data.Email</td>
                            <td>@person.data.PhoneNumber</td>
                            <td>@person.data.CreditCard</td>
                            <td>@person.data.JoinDate</td>
                            <td>
                                <button class="btn btn-outline-dark" @onclick="() => HandleEdit(person.data.id)">Edit</button>
                                <button class="btn btn-outline-danger ms-1" @onclick="() => HandleDelete(person.data.id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@code {
    public List<Person>? employeeLists { get; set; }
    private string? searchString;
    const string localStorageKey = "Employee";

    protected async override void OnInitialized()
    {
        var json = await jsService.GetItemAsync(localStorageKey);
        if (json == null)
        {
            employeeLists = new List<Person>();
        }
        else if (json == localStorageKey)
        {
            employeeLists = new List<Person>();
            jsService.DeleteOneKey(localStorageKey);
        }
        else
        {
            employeeLists = jsService.FromJson(json);
        }
        employeeLists = json == null ? null : jsService.FromJson(json);
        StateHasChanged();
    }


    private async void HandleDelete(int id)
    {
        var idx = employeeLists!.FindIndex(d => d.id == id);
        if (idx >= 0)
        {
            employeeLists.RemoveAt(idx);
            jsService.ToJson(employeeLists);
            await jsService.SetItemAsync("Employee", localStorageKey);
        }
    }
    private async void DeleteAll()
    {
        await jsService.DeleteAllKey();
        employeeLists = null;
        StateHasChanged();
    }
    private async void DeleteOne()
    {
        await jsService.DeleteOneKey(localStorageKey);
        employeeLists = null;
        StateHasChanged();
    }

    private void HandleAdd()
    {
        navigate.NavigateTo("/addemployee");
    }
    private void HandleEdit(int id)
    {
        navigate.NavigateTo($"/addemployee?id={id}&isEdit=true");
    }
    
    


    //Search
    private async void SearchTable()
    {
        var json = await jsService.GetItemAsync(localStorageKey);
        var result = jsService.FromJson(json);
        if (!string.IsNullOrWhiteSpace(searchString))
        {
            result = employeeLists?.FindAll(d => d.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase));
        }
        employeeLists = result;
    }
    private void HandleSearch(ChangeEventArgs e)
    {
        searchString = e?.Value?.ToString();
        SearchTable();
    }

    

    
}