<h3>@ListStatus (@Jobs.Count())</h3>

<ul class="dropzone @dropClass" 
    ondragover="event.preventDefault();"
    ondragstart="event.dataTransfer.setData('', event.target.id);"
    @ondrop="HandleDrop"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDrapLeave">

    @foreach (var job in Jobs)
    {
        <Job JobModel="job"/>
    }
</ul>

@code {
    [CascadingParameter]
    JobContainer Container { get; set; }
    [Parameter]
    public JobStatuses ListStatus{ get; set; }
    [Parameter]
    public JobStatuses[] AllowdStatuses{ get; set; }

    List<JobModel> Jobs = new List<JobModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Jobs.Clear();
        Jobs.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status) return;

        if (AllowdStatuses != null && AllowdStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDrapLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";
        if (AllowdStatuses != null && !AllowdStatuses.Contains(Container.Payload.Status)) return;
        await Container.UpdateJobAsync(ListStatus);
    }



}
