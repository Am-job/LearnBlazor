@page "/create_category"
@inject IJSRuntime JSRuntime

    <div style="width : fit-content; height : fit-content;" class="d-flex justify-content-center align-content-lg-center bgb rounded my-1">
        <div class=" p-5 d-flex flex-column just">

            @if (!showAddBrand)
            {
            <button @onclick="toggleAddBrand" class="btn btn-info my-2"> Add New Brand</button>
        }
        else
        {
            if (BrandData != null)
            {
                <div class="d-flex align-items-lg-center justify-content-between">
                    <div class="text-center text-white mx-2">New Brand : </div>
                    <input @bind-value="BrandData.Name" style="outline:none; width : 200px;" class="my-3 rounded" required placeholder="Add New brand" />
                    <button @onclick="AddNewBrand" class="bg-info btn-sm btn" style="border : none;">add</button>
                </div>
            }
        }
        @if (!showRemove)
         {
                <div>
                    <button @onclick="toggleRemoveBrand" class="btn btn-danger "> <span class="oi oi-warning " aria-hidden="true"></span> Remove Brand</button>
                </div>
         }
        else
        {
                <div>
                    <select @onchange="onRemoveselection" class="px-1 py-1 rounded">
                        @if (removeSelect == null)
                        {
                            <option selected>Choose</option>
                        }
                        @if (Carservice?.carBrand != null)
                        {
                            @foreach (var item in Carservice.carBrand)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                    @if (removeSelect != null)
                    {
                        <button @onclick="()=>RemoveBrand(removeSelect)" class="btn btn-danger btn-sm" style="margin-left : 0.2rem;">
                            <span class="oi oi-warning " aria-hidden="true"></span>
                            remove
                        </button>
                    }
                </div>
                @if (removeSelect == null)
                {
                    <div class="bg-warning px-2 py-1 rounded">
                        <span class="oi oi-warning " aria-hidden="true"></span>Choose a Brand to remove!
                    </div>
                }
        }
        </div>
    </div>

@code {

    [Inject]
    Carservice? Carservice { get; set; }

    CarBrandObj? BrandData = new CarBrandObj();

    private bool showRemove { get; set; } = false;

    private bool showAddBrand { get; set; } = false;

    private string? removeSelect { get; set; }

    private int maxId { get; set; }

    private async Task AddNewBrand()
    {
        @if (BrandData != null)
        {
            @if (Carservice?.carBrand.Count != 0 && Carservice?.carBrand != null )
            {
                maxId = Carservice.carBrand.Max(item => (int)item.GetType().GetProperty("Id").GetValue(item));
            }
            var NewData = new CarBrandObj()
                {
                    Name = BrandData.Name,
                    Id = maxId + 1
                };
            var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Add New {BrandData.Name} Brand?");
            @if (result)
            {
                Carservice?.AddBrand(NewData);
                BrandData = new CarBrandObj();
            }
        }
    }

    private void onRemoveselection(ChangeEventArgs e)
    {
        removeSelect = (e?.Value?.ToString());
        StateHasChanged();
    }

    private void toggleAddBrand()
    {
        showAddBrand = !showAddBrand;
    }

    private async Task toggleRemoveBrand()
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Removing a Brand may cause the individual product's brand removed, You want to proceed? ");
        @if (result)
        {
            showRemove = !showRemove;
        }
    }

    private async Task RemoveBrand(string select)
    {
        var obj = Carservice?.carBrand.Find(item => item.Id == Int64.Parse(select));

        if (obj != null)
        {
            var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Delete {obj.Name} Brand?");
            if (result)
            {
                Carservice?.DeleteBrand(obj);
                removeSelect = null;
            }
        }
    }

}
