@page "/entry"


@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div style="width : fit-content; height : fit-content " class="d-flex justify-content-center align-content-lg-center bgb rounded">
    <div class=" p-5 d-flex flex-column just">

        @if (CloneData == null)
        {
            @if (Name?.Length == 0 || Model?.Length == 0 || Name == null || Model == null && ShowError)
            {
                <div class="bg-warning px-2 rounded py-1">
                    <span class="oi oi-warning " aria-hidden="true"></span>Please Fill the required fields.
                </div>
            }
            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vehical's Name:</div>
                <input @bind-value="Name" class="my-3 rounded" required placeholder="required" />
            </div>
            @if (Name?.Length >= 50 && CharaError)
            {
                <div class="bg-warning px-2 py-1 rounded">
                    <span class="oi oi-warning " aria-hidden="true"></span>Maxium char for name is 50.
                </div>
            }
            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vechical's Model:</div>
                <input @bind-value="Model" class="my-3 rounded" required placeholder="required" />
            </div>

            @if (Model?.Length >= 50 && CharaError)
            {
                <div class="bg-warning px-2 py-1 rounded">
                    <span class="oi oi-warning " aria-hidden="true"></span> Maxium char for Model is 50.
                </div>
            }

            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vehical's Brand:</div>
                <input @bind-value="Brand" class="my-3 rounded" />
            </div>

            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vehical's Color:</div>
                <input @bind-value="Color" class="my-3 rounded" />
            </div>

            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Num of Seater :</div>
                <input @bind-value="NPerson" class="my-3 rounded" />
            </div>
        }
        else
        {
            @if (CloneData?.Name?.Length == 0 || CloneData?.Model?.Length == 0 || CloneData?.Name == null || CloneData?.Model == null && ShowError)
            {
                <div class="bg-warning px-2 rounded py-1">
                    <span class="oi oi-warning " aria-hidden="true"></span>Please Fill the required fields.
                </div>
            }
            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vehical's Name:</div>
                <input @bind-value="CloneData.Name" class="my-3 rounded" required placeholder="required" />
            </div>
            @if (CloneData?.Name?.Length >= 50 && CharaError)
            {
                <div class="bg-warning px-2 py-1 rounded">
                    <span class="oi oi-warning " aria-hidden="true"></span>Maxium char for name is 50.
                </div>
            }
            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vechical's Model:</div>
                <input @bind-value="CloneData.Model" class="my-3 rounded" required placeholder="required" />
            </div>

            @if (CloneData?.Model?.Length >= 50 && CharaError)
            {
                <div class="bg-warning px-2 py-1 rounded">
                    <span class="oi oi-warning " aria-hidden="true"></span> Maxium char for Model is 50.
                </div>
            }

            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vehical's Brand:</div>
                <input @bind-value="CloneData.Brand" class="my-3 rounded" />
            </div>

            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Vehical's Color:</div>
                <input @bind-value="CloneData.Color" class="my-3 rounded" />
            </div>

            <div class="d-flex align-items-lg-center justify-content-between">
                <div class="text-center text-white mx-2">Num of Seater :</div>
                <input @bind-value="CloneData.NPerson" class="my-3 rounded" />
            </div>
        }


        @if (CloneData == null)
        {
            <div class="d-flex align-items-lg-center justify-content-between mb-2">
                <button @onclick="AddVechical" class="btn btn-info text-white">Add Vehical</button>
            </div>

            @if (route)
            {
                <div class="d-flex align-items-lg-center justify-content-between">
                    <button @onclick="onBackHome" class="btn btn-light">Go Back Home</button>
                </div>
            }
        }
        else
        {
            <div class="d-flex align-items-lg-center justify-content-between mb-2">
                <button @onclick="() =>onSaveChange(CloneData.Name, CloneData.Model, CloneData.Brand, CloneData.Color, CloneData.NPerson, CloneData.Id)" class="btn btn-info">Save Changes</button>
            </div>

            @if(route)
            {
                <div class="d-flex align-items-lg-center justify-content-between">
                    <button @onclick="onBackHome" class="btn btn-light">Go Back Home</button>
                </div>
            }
        }
    </div>
</div>

@code {
    [Inject]
    Carservice? Carservice { get; set; }

    public string? Name, Model, Brand, Color;

    public int  NPerson;

    public int id { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery]
    public int ParaID { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool route { get; set; }

    public Cardata? CloneData { get; set; }

    public bool ShowError { get; set; } = false;

    public string? OverlimitName { get; set; } = "";

    public string? OverlimitModel { get; set; } = "";

    public bool CharaError { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CloneData = Carservice?.Carlist.ConvertAll(item => (Cardata)item.Clone()).Find(item => item.Id == ParaID);

    }

    private void AddVechical()
    {

        var setcardatas = new Cardata
            {
                Name = Name,
                Model = Model,
                Brand = Brand,
                Color = Color,
                NPerson = NPerson,
                Id = id++
            };
        if (Name?.Length == 0 || Model?.Length == 0 || Name == null || Model == null)
        {
            ShowError = true;
            CharaError = true;


        }
        else
        {
            ShowError = false;
            StateHasChanged();


            if (Name?.Length >= 50 || Model?.Length >= 50)
            {
                CharaError = true;

            }
            else
            {

                ShowError = false;
                CharaError = false;
                Name = ""; Model = ""; Brand = ""; Color = ""; NPerson = 0;
                JSRuntime.InvokeVoidAsync("alert", "Successfully added");
                Carservice?.AddCarList(setcardatas);
                JSRuntime.InvokeVoidAsync("console.log", Carservice?.Carlist);
                StateHasChanged();
            }

        }

    }
    public async void onSaveChange(string? Name, string? Model, string? Brand, string? Color, int NPerson, int id)
    {
        Cardata? OriginalData = Carservice?.Carlist.Find(item => item.Id == id);



        if (CloneData?.Name?.Length == 0 || CloneData?.Model?.Length == 0 || CloneData?.Name == null || CloneData?.Model == null)
        {
            ShowError = true;
            CharaError = true;


        }
        else
        {
            ShowError = false;
            StateHasChanged();


            if (CloneData?.Name?.Length >= 50 || CloneData?.Model?.Length >= 50)
            {
                CharaError = true;

            }
            else
            {

                ShowError = false;
                CharaError = false;


                if( OriginalData != null )
                {
                    OriginalData.Name = Name;
                    OriginalData.Model = Model;
                    OriginalData.Brand = Brand;
                    OriginalData.Color = Color;
                    OriginalData.NPerson = NPerson;
                    OriginalData.Id = id;   
                }
                await JSRuntime.InvokeVoidAsync("alert", "Successfully Updated!!");

                if(route)
                {
                    Name = ""; Model = ""; Brand = ""; Color = ""; NPerson = 0;
                }

                StateHasChanged();
            }

        }

    }

    private void onBackHome()
    {
        NavigationManager.NavigateTo("/");
    }
}



 private async Task AddNewBrand()
    {
        if (BrandData != null && LastBrand != null)
        {
            var dataWithLastBrand = new CarBrandObj()
                {
                    Name = BrandData.Name,
                    Id = LastBrand.Id + 1
                };

            var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Add New {BrandData.Name} Brand?");

            @if (result)
            {
                Carservice?.AddBrand(dataWithLastBrand);
                BrandData = new CarBrandObj();
            }
        }
        else
        {
            if(BrandData != null )
            {
                var DataWithNewBrand = new CarBrandObj()
                    {
                        Name = BrandData.Name,
                        Id = BrandData.Id + 1
                    };
                var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Add New {BrandData.Name} Brand?");

                @if (result)
                {
                    Carservice?.AddBrand(DataWithNewBrand);
                    BrandData = new CarBrandObj();
                }
            }
        }
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("console.log", Carservice?.carBrand);
    }