@page "/editEmployee"

@if(isEditView == true)
{
    <HeaderBackComponent ButtonTitle="Back">@Title Employee</HeaderBackComponent>
}

<div class="row">
    <EditForm Model="@EmployeeForm" OnValidSubmit="HandleSubmit" OnInvalidSubmit="Invalid" class="mx-auto col-md-10 col-12 my-2 row">
        <DataAnnotationsValidator />
        <div class="mb-3 col-lg-6 col-12">
            <label for="Name" class="form-label">Name</label>
            <input type="text" readonly="@IsDisabled" class="form-control" id="Name" @bind-value="EmployeeForm.Name">
            <ValidationMessage For="@(() => EmployeeForm.Name)" />
        </div>
        <div class="mb-3 col-lg-6 col-12 d-lg-block d-none">
            <label for="Position" class="form-label">Position</label>
            <select class="form-control" @bind="EmployeeForm.Position" disabled="@IsDisabled">
                <option value="" disabled selected>-- Select Employee' Position --</option>
                <option value="Manager">Manager</option>
                <option value="Senior">Senior</option>
                <option value="Junior">Junior</option>
            </select>
            <ValidationMessage For="@(() => EmployeeForm.Position)" />
        </div>
        <div class="mb-3 col-lg-6 col-12">
            <label for="Dob" class="form-label">Date Of Birth</label>
            <input type="date" readonly="@IsDisabled" class="form-control" id="Dob" @bind-value="EmployeeForm.Dob">
            <ValidationMessage For="@(() => EmployeeForm.Dob)" />
        </div>
        <div class="mb-3 col-lg-6 col-12 d-lg-block d-none">
            <label for="Salary" class="form-label">Salary</label>
            <input type="number" readonly="@IsDisabled" class="form-control" id="Salary" @bind-value="EmployeeForm.Salary">
            <ValidationMessage For="@(() => EmployeeForm.Salary)" />
        </div>
        <div class="mb-3 col-lg-8 mx-auto col-12">
            <label for="JoinDate" class="form-label">Join Date</label>
            <input type="datetime-local" readonly="@IsDisabled" class="form-control" id="JoinDate" @bind-value="EmployeeForm.JoinDate">
            <ValidationMessage For="@(() => EmployeeForm.JoinDate)" />
        </div>
        <div class="mb-3 col-12 d-lg-none d-block">
            <label for="Position" class="form-label">Position</label>
            <select class="form-control" @bind="EmployeeForm.Position" disabled="@IsDisabled">
                <option value="" disabled selected>-- Select Employee' Position --</option>
                <option value="Manager">Manager</option>
                <option value="Senior">Senior</option>
                <option value="Junior">Junior</option>
            </select>
            <ValidationMessage For="@(() => EmployeeForm.Position)" />
        </div>
        <div class="mb-3 col-12 d-lg-none d-block">
            <label for="Salary" class="form-label">Salary</label>
            <input type="number" readonly="@IsDisabled" class="form-control" id="Salary" @bind-value="EmployeeForm.Salary">
            <ValidationMessage For="@(() => EmployeeForm.Salary)" />
        </div>
        @if (!IsDisabled)
        {
            <div class="mb-3 col-md-8 col-6 mt-3 mx-auto d-flex justify-content-center">
                <button type="submit" class="btn btn-primary px-4 me-2">Submit</button>
                @if (Title == "Edit")
                {
                    <button @onclick="HandleToggle" class="btn btn-dark px-4">Cancel</button>
                }
            </div>
        }
        else
        {
            <div class="mb-3 col-md-8 col-6 mt-3 mx-auto d-flex justify-content-center">
                <button @onclick="HandleToggle" class="btn btn-dark px-5">Edit</button>
            </div>
        }

    </EditForm>
</div>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public bool isEditView { get; set; } = true;
    private bool IsDisabled { get; set; } = false;
    private string? Title { get; set; }

    private Employee? EmployeeForm { get; set; } = new Employee()
        {
            Name = "",
            Dob = DateOnly.FromDateTime(DateTime.Now),
            ID = new Random().Next(0, 100000000),
            JoinDate = DateTime.Now,
            Position = "",
            Salary = 0
        };

    protected override void OnInitialized()
    {
        if(!(Id is long))
        {
            navigate.NavigateTo("/");
        }

        navigate.LocationChanged += routeChange;
        if(Id >= 1)
        {
            var employee = data.Employees.Find(p => p.ID == Id);
            if(employee == null)
            {
                //navigate.NavigateTo("/");
            }
            else
            {
                EmployeeForm = employee!.ShallowCopy();
                Title = "Edit";

                IsDisabled = isEditView == true ? false : true;
            }
        }
        else
        {
            Title = "Add";
        }
    }
    public void Dispose()
    {
        navigate.LocationChanged -= routeChange;
    }


    private void routeChange(object? sender, LocationChangedEventArgs e) // instead of route change listen
    {
        if(Id != 0)
        {
            var employee = data.Employees.Find(p => p.ID == Id);
            if (employee == null)
            {
                //navigate.NavigateTo("/");
                StateHasChanged();
            }
            else
            {
                EmployeeForm = employee!.ShallowCopy();
            }

        }
    }

    private void HandleSubmit()
    {
        if(EmployeeForm!.Name != "")
        {
            data.UpdateEmployee(EmployeeForm);
            navigate.NavigateTo("/");
            service.NotifyStateChanged("Edit", EmployeeForm);
        }
    }

    private void Invalid()
    {

    }

    private void HandleToggle()
    {
        if (isEditView == false)
        {
            var employee = data.Employees.Find(p => p.ID == Id);
            if (employee == null)
            {
                navigate.NavigateTo("/");
            }
            EmployeeForm = employee!.ShallowCopy();
            IsDisabled = !IsDisabled;
        }
        else
        {
            navigate.NavigateTo("/");
        }
    }
}
