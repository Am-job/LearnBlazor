@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager navigate
<PageTitle>Employee Status</PageTitle>

<h3>List of User</h3>
<div class="row">
    <div class="col-md-1 col-sm-10 mx-sm-auto m-1 d-grid">
        <button @onclick="AddEmployee" class="btn btn-outline-success">Add</button>
    </div>
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <div class="input-group">
            <input type="text" class="form-control" @onfocusout="HandleSearch" @bind="@SearchString" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch"><i class="fas fa-search"></i></button>
            </div>
        </div>
    </div>
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <select @onclick="HandleSearch" class="form-control" id="position" @bind="SelectPosition">
            <option value="" disabled selected>-- Select Employee' Position --</option>
            <option value="">All</option>
            <option value="Manager">Manager</option>
            <option value="Senior">Senior</option>
            <option value="Junior">Junior</option>
        </select>
    </div>
</div>

@if (WindowWidth < 768)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in FilterEmployee)
            {
                <tr>
                    <td scope="row">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">@(++idx)</li>
                        </ul>
                    </td>
                    <td>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Name: @employee.Name</li>
                            <li class="list-group-item">Position: @employee.Position</li>
                            <li class="list-group-item">Salary: @employee.Salary</li>
                            <li class="list-group-item">Age: @employee.Age</li>
                            <li class="list-group-item">Date of Birth: @employee.Dob.ToString("d-MMM-yyyy")</li>
                            <li class="list-group-item">JoinDate: @employee.JoinDate.ToString("d-MMM-yyyy h:m:s")</li>
                            <li class="list-group-item">
                                <div class="btn-group" role="group">
                                    <button @onclick="() => EditEmployee(employee.ID)" type="button" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-title="Edit">
                                        Edit <i class="fas fa-user-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-success" data-bs-toggle="tooltip" data-bs-title="Detail View">
                                        Explore <i class="fas fa-binoculars"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                        Delete <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </li>
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Name</th>
                <th scope="col">Position</th>
                <th scope="col">Salary</th>
                <th scope="col">Age</th>
                <th scope="col">Date of birth</th>
                <th scope="col">Join Date</th>
                <th scope="col">Settings</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var employee in FilterEmployee)
            {
                <tr>
                    <th scope="row">@(++idx)</th>
                    <td>@employee.Name</td>
                    <td>@employee.Position</td>
                    <td>@employee.Salary</td>
                    <td>@employee.Age</td>
                    <td>@employee.Dob.ToString("d-MMM-yyyy")</td>
                    <td>@employee.JoinDate.ToString("d-MMM-yyyy h:mm:ss")</td>
                    <td>
                        <div class="btn-group" role="group">
                            <button @onclick="() => EditEmployee(employee.ID)" type="button" class="btn btn-primary">
                                Edit <i class="fas fa-user-edit"></i>
                            </button>
                            <button @onclick="() => Detail(employee.ID)" type="button" class="btn btn-success">
                                Explore <i class="fas fa-binoculars"></i>
                            </button>
                            <button @onclick="() => DeleteOpen(employee)" type="button" class="btn btn-danger">
                                Delete <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (DeleteView)
{
    <Modal ButtonTitle="Delete" Close="DeleteClose" ButtonColor="btn-danger">
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Name: @DeleteEmployee.Name</li>
            <li class="list-group-item">Position: @DeleteEmployee.Position</li>
            <li class="list-group-item">Salary: @DeleteEmployee.Salary</li>
            <li class="list-group-item">Age: @DeleteEmployee.Age</li>
            <li class="list-group-item">Date of Birth: @DeleteEmployee.Dob.ToString("d-MMM-yyyy")</li>
            <li class="list-group-item">JoinDate: @DeleteEmployee.JoinDate.ToString("d-MMM-yyyy h:m:s")</li>
        </ul>
    </Modal>
}


@code{
    //Get Data From Local Database
    [Inject]
    public GetData? Data { get; set; } // ServiceFile

    //Declare Varaiable
    private List<Employee>? FilterEmployee { get; set; }
    private string? SearchString { get; set;  }
    private string? SelectPosition { get; set; }
    public int idx { get; set; }

    //for Browser Resize
    private DotNetObjectReference<Index>? _objectReference;
    public int WindowWidth { get; set; }

    //Initialize Project
    protected async override void OnInitialized()
    {
        SearchTable();

        //for Browser Resize
        _objectReference = DotNetObjectReference.Create(this);
        await IntialWidthListener();
    }

    //After Render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ResizeWindowWidthListener();
            idx = 0;
            StateHasChanged();
        }
    }





    //for Browser Resize
    [JSInvokable]
    public void UpdateWindowWidth(int windowWidth)
    {
        WindowWidth = windowWidth;
        idx = 0;
        StateHasChanged();
    }
    [JSInvokable]
    public void GetInitalWidthCS(int windowWidth)
    {
        WindowWidth = windowWidth;
        idx = 0;
        StateHasChanged();
    }
    // Listen Resize and Dispose
    private async Task IntialWidthListener()
    {
        await JSRuntime.InvokeVoidAsync("GetInitalWidthJS", _objectReference);
    }
    private async Task ResizeWindowWidthListener()
    {
        await JSRuntime.InvokeVoidAsync("AddWindowWidthListener", _objectReference);
    }
    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("RemoveWindowWidthListener", _objectReference);
        _objectReference?.Dispose();
    }








    //Search and filter Function
    private void SearchTable()
    {
        var result = Data.Employees;

        if (!string.IsNullOrWhiteSpace(SearchString))
        {
            result = result.FindAll(d => d.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(SelectPosition))
        {
            result = result.FindAll(d => d.Position.Contains(SelectPosition, StringComparison.OrdinalIgnoreCase));
        }

        FilterEmployee = result;
    }
    private void HandleSearch()
    {
        SearchTable();
    }



    //Navigate
    public void AddEmployee()
    {
        navigate.NavigateTo("/addEmployee");
    }

    //EditEmployee
    public void EditEmployee(int Id)
    {
        navigate.NavigateTo($"/editEmployee/{Id}");
    }

    //Detail View Function
    public void Detail(int Id)
    {
        navigate.NavigateTo($"/detailView/{Id}");
    }


    //Delete Modal
    protected bool DeleteView { get; set; } = false;
    private Employee DeleteEmployee { get; set; }

    public void DeleteOpen(Employee employee)
    {
        DeleteView = true;
        DeleteEmployee = employee;
        idx = 0;
    }
    public void DeleteClose()
    {
        DeleteView = false;
        idx = 0;
        StateHasChanged();
    }
}