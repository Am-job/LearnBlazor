@page "/"
@inject GetData GetData
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime



<link />
<PageTitle>Employee Status</PageTitle>

<h3>List of User</h3>
<div class="row">
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <div class="input-group">
            <input type="text" class="form-control" @onfocusout="HandleSearch" @bind="@SearchString" placeholder="Search...">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch"><i class="fas fa-search"></i></button>
            </div>
        </div>
    </div>
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <select @onclick="HandleSearch" class="form-control" id="position" @bind="SelectPosition">
            <option value="" disabled selected>-- Select Employee' Position --</option>
            <option value="">All</option>
            <option value="Manager">Manager</option>
            <option value="Senior">Senior</option>
            <option value="Junior">Junior</option>
        </select>
    </div>
</div>

@if (WindowWidth < 768)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            @for (var i = 0; i < FilterEmployee.Count; i++)
            {
                <tr>
                    <td scope="row">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">@(i + 1)</li>
                        </ul>
                    </td>
                    <td>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Name: @FilterEmployee[i].Name</li>
                            <li class="list-group-item">Position: @FilterEmployee[i].Position</li>
                            <li class="list-group-item">Salary: @FilterEmployee[i].Salary</li>
                            <li class="list-group-item">Age: @FilterEmployee[i].Age</li>
                            <li class="list-group-item">Date of Birth: @FilterEmployee[i].Dob</li>
                            <li class="list-group-item">JoinDate: @FilterEmployee[i].JoinDate</li>
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Name</th>
                <th scope="col">Position</th>
                <th scope="col">Salary</th>
                <th scope="col">Age</th>
                <th scope="col">Date of birth</th>
                <th scope="col">Join Date</th>
            </tr>
        </thead>
        <tbody>

            @for (var i = 0; i < FilterEmployee.Count; i++)
            {
                <tr>
                    <th scope="row">@(i + 1)</th>
                    <td>@FilterEmployee[i].Name</td>
                    <td>@FilterEmployee[i].Position</td>
                    <td>@FilterEmployee[i].Salary</td>
                    <td>@FilterEmployee[i].Age</td>
                    <td>@FilterEmployee[i].Dob</td>
                    <td>@FilterEmployee[i].JoinDate</td>
                </tr>
            }
        </tbody>
    </table>
}



@code{
    //Get Data From Local Database
    [Inject]
    public GetData? Data { get; set; } // ServiceFile
    private List<Employee>? FilterEmployee { get; set; }

    //Declare Varaiable
    private string? SearchString { get; set;  }
    private string? SelectPosition { get; set; }

    //for Browser Resize
    private DotNetObjectReference<Index>? _objectReference;
    public int WindowWidth { get; set; }

    //Initialize Project
    protected async override void OnInitialized()
    {
        SearchTable();

        //for Browser Resize
        _objectReference = DotNetObjectReference.Create(this);
        await IntialWidthListener();
    }

    //After Render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ResizeWindowWidthListener();
            StateHasChanged();
        }
    }

    //Search and filter Function
    private void SearchTable()
    {
        var result = Data.Employees;

        if (!string.IsNullOrWhiteSpace(SearchString))
        {
            result = result.FindAll(d => d.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(SelectPosition))
        {
            result = result.FindAll(d => d.Position.Contains(SelectPosition, StringComparison.OrdinalIgnoreCase));
        }

        FilterEmployee = result;
    }
    private void HandleSearch()
    {
        SearchTable();
    }

    //for Browser Resize
    [JSInvokable]
    public void UpdateWindowWidth(int windowWidth)
    {
        WindowWidth = windowWidth;
        StateHasChanged();
    }
    [JSInvokable]
    public void GetInitalWidthCS(int windowWidth)
    {
        WindowWidth = windowWidth;
        StateHasChanged();
    }

    // Listen Resize and Dispose
    private async Task IntialWidthListener()
    {
        await JSRuntime.InvokeVoidAsync("GetInitalWidthJS", _objectReference);
    }
    private async Task ResizeWindowWidthListener()
    {
        await JSRuntime.InvokeVoidAsync("AddWindowWidthListener", _objectReference);
    }
    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("RemoveWindowWidthListener", _objectReference);
        _objectReference?.Dispose();
    }
    
}