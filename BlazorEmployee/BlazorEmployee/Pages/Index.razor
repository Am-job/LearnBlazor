@*Home Page*@
@page "/"
@implements IAsyncDisposable

<PageTitle>Employee Status</PageTitle>

<h3>List of User</h3>
<div class="row">
    <div class="col-md-1 col-sm-10 mx-sm-auto m-1 d-grid">
        <button @onclick="AddEmployee" class="btn btn-outline-success">Add</button>
    </div>
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <div class="input-group">
            <input class="form-control" @onchange="HandleSearch" placeholder="Search..." />
        </div>
    </div>
    <div class="form-group col-md-5 col-sm-10 mx-sm-auto m-1">
        <select @onclick="HandleSelect" class="form-control" id="position" @bind="selectPosition">
            <option value="" disabled selected>-- Select Employee' Position --</option>
            <option value="">All</option>
            <option value="Manager">Manager</option>
            <option value="Senior">Senior</option>
            <option value="Junior">Junior</option>
        </select>
    </div>
</div>

@if (filterEmployee == null)
{
    <p>Loading ....</p>
} else {
@if (WindowWidth < 768)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var employee in filterEmployee.Select((data, index) => (data, index)))
            {
                <tr>
                    <td scope="row">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">@(employee.index + 1)</li>
                        </ul>
                    </td>
                    <td>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Name: @employee.data.Name</li>
                            <li class="list-group-item">Position: @employee.data.Position</li>
                            <li class="list-group-item">Salary: @employee.data.Salary</li>
                            <li class="list-group-item">Date of Birth: @employee.data.Dob.ToString("d-MMM-yyyy")</li>
                            <li class="list-group-item">JoinDate: @employee.data.JoinDate.ToString("d-MMM-yyyy h:mm tt")</li>
                            <li class="list-group-item">
                                <div class="btn-group" role="group">
                                    <button @onclick="() => EditModal(employee.data.ID)" type="button" class="btn btn-outline-success">
                                        <i class="fas fa-binoculars"></i>
                                    </button>
                                     <button @onclick="() => EditEmployee(employee.data.ID)" type="button" class="btn btn-outline-primary">
                                        <i class="fas fa-user-edit"></i>
                                    </button>
                                    <button @onclick="() => DeleteOpen(employee.data.ID)" type="button" class="btn btn-outline-danger">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </li>
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Name</th>
                <th scope="col">Position</th>
                <th scope="col">Salary</th>
                <th scope="col">Date of birth</th>
                <th scope="col">Join Date</th>
                <th scope="col">Settings</th>
            </tr>
        </thead>
        <tbody>

                @foreach (var employee in filterEmployee.Select((data, index) => (data, index)))
            {
                <tr>
                    <th scope="row">@(employee.index + 1)</th>
                    <td>@employee.data.Name</td>
                    <td>@employee.data.Position</td>
                    <td>@employee.data.Salary</td>
                    <td>@employee.data.Dob.ToString("d-MMM-yyyy")</td>
                    <td>@employee.data.JoinDate.ToString("d-MMM-yyyy h:mm tt")</td>
                    <td>
                        <div class="btn-group" role="group">
                            <button @onclick="() => EditModal(employee.data.ID)" type="button" class="btn btn-outline-success">
                                <i class="fas fa-binoculars"></i>
                            </button>
                            <button @onclick="() => EditEmployee(employee.data.ID)" type="button" class="btn btn-outline-primary">
                                <i class="fas fa-user-edit"></i>
                            </button>
                            <button @onclick="() => DeleteOpen(employee.data.ID)" type="button" class="btn btn-outline-danger">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
}

@if (deleteModal)
{
    <Modal Close="DeleteClose" ButtonTitle="Delete Employee">
        <button type="button" class="btn btn-outline-danger" @onclick="HandleDelete">Delete</button>
        <button type="button" @onclick="DeleteClose" class="btn btn-outline-dark mx-1">Close</button>
    </Modal>
}
@if (editModal)
{
    <Modal Close="EditClose" ButtonTitle="Edit Employee">
        <EditEmployee isEditView="false" Id="selectId"></EditEmployee>
    </Modal>
}
@if (addModal)
{
    <Modal Close="AddClose" ButtonTitle="Add Employee">
        <EditEmployee isEditView="false" Id="0"></EditEmployee>
    </Modal>
}

@code{
    //Project Setup
    private List<Employee>? filterEmployee { get; set; }

    private string? searchString { get; set;  }
    private string? selectPosition { get; set; }

    private bool deleteModal = false;
    private bool editModal = false;
    private bool addModal = false;
    private int selectId = 0;


    private DotNetObjectReference<Index>? _objectReference;
    private int WindowWidth { get; set; }

    //for Browser Resize and lifeCycle
    protected async override void OnInitialized()
    {
        SearchTable();

        //for Browser Resize
        _objectReference = DotNetObjectReference.Create(this);
        await IntialWidthListener();
        ModalService.modalClick += ABC;

    }

    private void ABC(string key, object obj )
    {
        if(key == "Edit")
        {
            SearchTable();
            EditClose();
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ResizeWindowWidthListener();
            StateHasChanged();
        }
    }
    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("RemoveWindowWidthListener", _objectReference);
        _objectReference?.Dispose();
        ModalService.modalClick -= ABC;
    }





    //for Browser Resize
    [JSInvokable]
    public void UpdateWindowWidth(int windowWidth)
    {
        WindowWidth = windowWidth;
        StateHasChanged();
    }

    [JSInvokable]
    public void GetInitalWidthCS(int windowWidth)
    {
        WindowWidth = windowWidth;
        StateHasChanged();
    }
    // Listen Resize and Dispose
    public async Task IntialWidthListener()
    {
        await JSRuntime.InvokeVoidAsync("GetInitalWidthJS", _objectReference);
    }
    public async Task ResizeWindowWidthListener()
    {
        await JSRuntime.InvokeVoidAsync("AddWindowWidthListener", _objectReference);
    }



    //Search and filter Function
    private void SearchTable()
    {
        var result = DataService.employees;

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            result = result.FindAll(d => d.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(selectPosition))
        {
            result = result.FindAll(d => d.Position.Contains(selectPosition, StringComparison.OrdinalIgnoreCase));
        }

        filterEmployee = result;
    }
    private void HandleSearch(ChangeEventArgs e)
    {
        searchString = e?.Value?.ToString();
        SearchTable();
    }
    private void HandleSelect()
    {
        SearchTable();
    }



    //Navigate
    //EditEmployee
    private void EditEmployee(int Id)
    {
        navigate.NavigateTo($"/editEmployee?id={Id}");
    }



    //Modal
    //Delete Modal
    private void DeleteOpen(int id)
    {
        deleteModal = true;
        selectId = id;
    }
    private void DeleteClose()
    {
        deleteModal = false;
        SearchTable();
        selectId = 0;
        StateHasChanged();
    }
    private void HandleDelete()
    {
        DataService.DeleteEmployee(selectId);
        DeleteClose();
    }


    //Edit Modal 
    private async void EditModal(int Id)
    {
        selectId = Id;
        editModal = true;
        await ToggleModal();
    }
    private async void EditClose()
    {
        editModal = false;
        await ToggleModal();
        StateHasChanged();
        selectId = 0;
    }

    //AddEmployee
    private async void AddEmployee()
    {
        addModal = true;
        await ToggleModal();
    }
    private async void AddClose()
    {
        addModal = false;
        await ToggleModal();
        StateHasChanged();
    }

    //Toggle Body class for modal
    [JSInvokable]
    public async Task ToggleModal()
    {
        await JSRuntime.InvokeVoidAsync("AddBodyStyle");
    }
}